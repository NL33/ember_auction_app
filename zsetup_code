View locally: $ python -m SimpleHTTPServer
view at localhost:8000

Basic Setup:

NOTE: using "additionallibs" (not libs) for better performance

1.	*create auctioner.js
Auctioner = Ember.Application.create()

2.	*router.js
Auctioner.Router.map(function() { 
	this.resource('categories', {path: '/'});  //categories will be home page
});

3.	*store.js:
Auctioner.ApplicationSerializer = DS.LSSerializer.extend(); 
Auctioner.ApplicationAdapter = DS.LSAdapter.extend(); 

4. *add store.js to index.html:
<script src="store.js"></script>

5. *index.html
<script src="auctioner.js"></script>
<script src="router.js"></script>

 <script>
    EmberHandlebarsLoader.loadTemplates(['categories', 'application']);
  </script>

6.	*template/application.hbs
<div class='container'>
  <nav class='navbar navbar-default' role='navigation'>
    <ul class='nav navbar-nav'>
      <li>{{#link-to 'categories'}}Categories Home{{/link-to}}</li>
    </ul>
  </nav>

  {{outlet}}
</div>

7.	*template/categories.hbs
<h1> The Auction Site! </h1>

<ul>
  {{#each category in model}}
    <li>{{#link-to 'category' category}}{{category.name}}{{/link-to}}</li>  //Note: link-to tags here will not work until add individual category functionality
  {{/each}}
</ul>

<p><a href='#' {{action 'sortByName'}}>Sort By Name</a></p>

<p>{{#link-to 'new-category' classNames="btn btn-primary"}}New Category{{/link-to}}</p>
****

***Add basic Categories functionality:***

1.	*Create Categories model:
models/category.js:

Auctioner.Category = DS.Model.extend({    //creates and Ember data model. Then specify the properties of this class:
  name: DS.attr(), 
  //items: DS.hasMany('item', {async: true}) //have to add after creating the 'item' model
});

2. *Add script tag to index.html
<script src="models/category.js"></script>

3. *Add model to the routes:
routes/categories.js:

Auctioner.CategoriesRoute = Ember.Route.extend({
  model: function(){ 
    return this.store.find('category');
  } 
});

4. *load new routes file in index.html:
<script src="routes/categories.js"></script>

****


***Add Ability ability to create categories:***

1. *Add 'new-category' route

router.js: 
  this.resource('new-category');


2. *templates/categories.hbs:

<p>{{#link-to 'new-category' classNames="btn btn-primary"}}New Category{{/link-to}}</p>


3. *create new-category template:
templates/new-category.hbs:

<h1> New Category </h1>

  <form>
    <div class="form-group">
      <label for="name">Name</label>
      {{input value=name id="name" class="form-control"}}
    </div>

    <button class="btn btn-primary" {{action 'save'}}>Save</button>
  </form>


4. *load template into index.html:
 <script>
    EmberHandlebarsLoader.loadTemplates(['categories', 'application', 'new-category'
    ]);
  </script>


5. *define save action in new controller:
controllers/new-category.js:

Auctioner.NewCategoryController = Ember.Controller.extend({  
  actions: {
    save: function() {
     var newCategory = this.store.createRecord('category', {  
      name: this.get('name') 
      }); 
         
         newCategory.save(); 
         this.transitionToRoute('categories'); 
      }
  }
});


6. load new controller into index.html:
<script src="controllers/new-category.js"></script>

****

***Add individual categories ***

1. *router.js:
  this.resource('category', {path: 'categories/:category_id'}); 

2. *routes/category.js
Auctioner.CategoryRoute = Ember.Route.extend({
  model: function(params){ 
    return this.store.find('category', params.category_id); 
});

3. *Add to index.html
<script src="routes/category.js"></script>

4. *create category template
templates/category.hbs:
<h2> Category: </h2>

<h3>{{name}}</h3>

5. *load into index.html:
 <script>
    EmberHandlebarsLoader.loadTemplates(['categories', 'application', 'new-category', 'category'
    ]);
  </script>

6. *If not already, link to category from the home page:
templates/categories.hbs:
<ul>
  {{#each category in model}}
    <li>{{#link-to 'category' category}}{{category.name}}{{/link-to}}</li>
  {{/each}}
</ul>
***

***Create items within Categories***

1) *create item model, and link to category:
models/item.js:

Auctioner.Item = DS.Model.extend({    
  name: DS.attr(),
  description: DS.attr(),
  owner: DS.attr(),
  estimated_price: DS.attr(),
  category: DS.belongsTo('category', {async: true}) 
});


2) *add model file to index.html:

<script src="models/item.js"></script>


3) *update category model to reflect relationship to comment model:
models/category.js:

Auctioner.Category = DS.Model.extend({    
  name: DS.attr() 
  items: DS.hasMany('item', {async: true})
});


4) *Enable creating new Item: add new-item to Router:
router.js
(nest new item within category, because that is where new item will be created):

Auctioner.Router.map(function() { 
  this.resource('categories', {path: '/'});  //categories will be home page
  this.resource('new-category');
  this.resource('category', {path: ':category_id'}, function() {
    this.resource('new-item')
  });   
});


5) *create new-item template:
templates/new-item.js:

<h3>New item</h3>
<form>
   <div class="form-group">
      <label for="name">Name</label>
      {{input value=name  id="name"  class="form-control"}}
    </div>

    <div class="form-group">
      <label for="owner">Owner</label>
      {{input value=owner  id="owner"  class="form-control"}}
    </div>

    <div class="form-group">
      <label for="description">Description</label>
      {{textarea value=description  id="description" class="form-control" rows="5"}}
    </div>

     <div class="form-group">
      <label for="estimated_price">Estimated Price</label>
      {{input value=estimated_price  id="estimated_price"  class="form-control"}}
    </div>

    <button class="btn btn-primary" {{action 'save'}}>Save</button>
</form>


5) *loadtemplate on index.html

 <script>
    EmberHandlebarsLoader.loadTemplates(['categories', 'application', 'new-category', 'category', 'new-item'
    ]);
  </script>


6) *create controller to handle save action in new-item template:
controllers/new-item.js

Auctioner.NewItemController = Ember.Controller.extend({  
  needs: ['category'], //needs: ember's way of allowing you to access one controller from another. You just list any controllers that you need access to. Here, we have said we need the post controller, which we use at the end of this controller below
  actions: { 
    save: function() {
     var item = this.store.createRecord('item', {  
      name: this.get('name'),
      owner: this.get('owner'),
      description: this.get('description'),
      estimated_price: this.get('estimated_price'),
      }); //note: shorter might be: var item = this.get('model')
         
         item.save(); 
         var category = this.get('controllers.category.model');  //we get the current controller, and get the category property, and ask it for its model
         category.get('items').pushObject(item); //here, we make the association. We ask the category for its items, and then call the pushObject method, and push in the item that we just created.
         category.save();
         this.transitionToRoute('category', category.id); //transition to the categories route for the category that we just added item in 
    }
  }
});

//NOTE: after entering data for new item, hitting save, and then clicking new item, form loads with previous data. Further, there are new ember methods for addressing some of the above (such as item.get('category').then(function(category){ category.save...)); but these do not seem to work with current setup on this app.


7) *add new-item controller to index.html:
<script src="controllers/new-item.js"></script>


8) *update category show page to list out items and to link to create-item action:  

<h2> Category: </h2>

<h3>{{name}}</h3>

<h3> Items: </h3>
<div class="row">
 {{#each item in items itemController="item"}}
 <div class="col-md-3 well">
  <div class="col-md-12">
      <p>{{item.name}}</p>
      <li>{{item.owner}}</li>
      <li>{{item.estimated_price}}</li>
      <button class="btn btn-xs btn-danger" {{action 'delete'}}>delete</button>
        <h3></h3> 
   </div>
 </div>
 {{/each}}
</div>

<h5></h5>

<p>{{#link-to 'new-item' classNames="btn btn-primary"}}New Item{{/link-to}}</p>

{{outlet}}

**NOTE: Bootstrap well styling is used here within column format within a loop


9) *update the categories template to display items below each category

<ul>
  {{#each category in model}}
    <li>{{#link-to 'category' category}}{{category.name}}{{/link-to}}</li>

  <h3> Items </h3>


  {{#each item in items itemController="item"}}
    <p>
      {{item.name}}
      {{item.owner}}
      {{item.estimated_price}}
    </p>
  {{/each}}

 {{/each}}
</ul>
****

****Add Ability to Delete Comments****
NOTE: Incomplete (requires further development of the Comment model; initial step provided here for illustrative purposes)

controllers/item.js:
Auctioner.ItemController = Ember.ObjectController.extend({
  actions: {
    delete: function() {
      if (confirm('Are you sure?')) {
        this.get('model').destroyRecord();
        this.transitionToRoute('category', category.id);
      }
    }
  }
});

index.html:
   <script src="controllers/item.js"></script>









